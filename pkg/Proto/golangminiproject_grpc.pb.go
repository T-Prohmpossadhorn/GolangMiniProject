// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FruitListServiceClient is the client API for FruitListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FruitListServiceClient interface {
	// GetFullList return all of the data
	GetFullList(ctx context.Context, in *GetFullListRequest, opts ...grpc.CallOption) (*FullList, error)
}

type fruitListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFruitListServiceClient(cc grpc.ClientConnInterface) FruitListServiceClient {
	return &fruitListServiceClient{cc}
}

func (c *fruitListServiceClient) GetFullList(ctx context.Context, in *GetFullListRequest, opts ...grpc.CallOption) (*FullList, error) {
	out := new(FullList)
	err := c.cc.Invoke(ctx, "/rf.golangminiproject.v1alpha1.FruitListService/GetFullList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FruitListServiceServer is the server API for FruitListService service.
// All implementations must embed UnimplementedFruitListServiceServer
// for forward compatibility
type FruitListServiceServer interface {
	// GetFullList return all of the data
	GetFullList(context.Context, *GetFullListRequest) (*FullList, error)
	mustEmbedUnimplementedFruitListServiceServer()
}

// UnimplementedFruitListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFruitListServiceServer struct {
}

func (UnimplementedFruitListServiceServer) GetFullList(context.Context, *GetFullListRequest) (*FullList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullList not implemented")
}
func (UnimplementedFruitListServiceServer) mustEmbedUnimplementedFruitListServiceServer() {}

// UnsafeFruitListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FruitListServiceServer will
// result in compilation errors.
type UnsafeFruitListServiceServer interface {
	mustEmbedUnimplementedFruitListServiceServer()
}

func RegisterFruitListServiceServer(s grpc.ServiceRegistrar, srv FruitListServiceServer) {
	s.RegisterService(&FruitListService_ServiceDesc, srv)
}

func _FruitListService_GetFullList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitListServiceServer).GetFullList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rf.golangminiproject.v1alpha1.FruitListService/GetFullList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitListServiceServer).GetFullList(ctx, req.(*GetFullListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FruitListService_ServiceDesc is the grpc.ServiceDesc for FruitListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FruitListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rf.golangminiproject.v1alpha1.FruitListService",
	HandlerType: (*FruitListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFullList",
			Handler:    _FruitListService_GetFullList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/golangminiproject.proto",
}
